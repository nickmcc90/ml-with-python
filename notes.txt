first init

WHAT WE WILL LEARN

- A typical problem statement for machine learning
- Downloading and exploring a dataset for machine learning
- Linear regression w one variable using Scikit-learn
- Linear regression w multiple variables
- Using categorical features for machine learning
- Regression coefficients and feature importance
- Other models and techniques for regression using Scikit-learn
- Applying linear regression to other datasets.


The problem at hand is that you are the lead data scientist for ACME
insurance. They task you with creating an automated dollar amount that
accurately tells the customer based on several of their characterists
how much they are likely to pay for an annual cost for insurance. We are
given a csv file.

Let's start by downloading the data set.

---------------------

1. We import the csv url and assign it to a variable.
medical_charges_url = 'https://raw.githubusercontent.com/JovianML/opendatasets/master/data/medical-charges.csv'

2. We import urlretrieve to be able to create a dataframe from the url.
from urllib.request import urlretrieve

3. We use urlretrieve, take the url and download it to a file called 'medical.csv'
urlretrieve(medical_charges_url, 'medical.csv')

4. Know we install pandas
pip install pandas --quiet

And import it in our file.
import pandas as pd

5. Downloading the medical-charges csv file was easy!! All I had to do was..
5a. brew install wget (into the terminal)
5b. wget name_of_url (name_of_url is the csv file you need, http.)
5c. It downloads!!!

6. In order to successfully print the dataset, I have now as code:

import pandas as pd

medical_df = pd.read_csv('medical-charges.csv')
print(medical_df)

Where in the terminal, I did these lines:
pip install --upgrade pandas
pip install --upgrade six

And then I code run the file and see the table!!

Timestamp: 6:34

With this data, we can try to estimate what the "charges" column
will equal by using age, sex, BMI, and stuff, through an application
or something.

7. Let's check the data types for the information with
medical_df.info()

timestamp: 8:05

timestamp: 9:49 // describe()
This function gives us descriptive statistics.

From the describe function, we know the average age is 39,
minimum age is 18, minimum BMI is 15, maximum amount of money
spent is 64,000 dollars. 50% people have medical charges under
10k dollars. This shows a bit of a skew in the data, since 64,000
seems to be an outlier.

Try to draw inferences from the data at first glance.

**We are able to save our notebook through jovian...
pip install jovian --quiet
import jovian
jovian.commit()

This is jupyter notebook syntax
//timestamp: 12:56

Let's explore the data by visualizing the relationships between
the charges column and other columns.

**So I'm figuring out how to run code in jupyter notebook. You type "jupyter notebook"
inside the folder you want in the apple terminal, then you click "New" and "create new notebook".
Then make sure the language you select is python 3. We will work on getting the csv imported and
everything next time. I won't be typing in the problem.py anymore at that point. Maybe

**Now we are in jupyter notebook!!

-----
8. We will use matplotlib, seaborn, and plotly for visualization.
First we install the necessary dependencies, and import what we need.

!pip install plotly matplotlib seaborn --quiet

import plotly.express as px
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
# the percent line keeps the figures from being pop-ups, and instead has
# them be figures in the resultant printed code.

//timestamp: 14:46

We include some styling to make the charts look better

sns.set_style('darkgrid')
matplotlib.rcParams['font.size'] = 14
matplotlib.rcParams['figure.figsize'] = (10, 6)
matplotlib.rcParams['figure.facecolor'] = '#00000000'
# The settings above will improve the default style of the charts.

Let's print out the age information in the set with this:

//timestamp: 16:02

 # we can make both a box plot and histogram with this code:

fig = px.histogram(medical_df,
                   x='age',
                   marginal='box',
                   nbins=47,
                   title='Distribution of Age')
fig.update_layout(bargap=0.1)
fig.show()

# we specify we only want to use the age. By specifying box, python will display
# a box plot as well.

# It is great to check all the factors at play when viewing a dataset.
# The spike in 18 & 19 year old could be because the overall population has more 18
# & 19 year olds. Once this is debunked, we can start making other assumptions, like
# maybe there is a premium when you are below 20. Or maybe people get their insurance
# right away when they turn 18.

//timestamp 19:38

//timestamp 24:42

//timestamp: 27:12

//timestamp: 29:32

//timestamp: 32:27

//timestamp: 34:34

//timestamp: 35:25

//timestamp: 36:50

//timestamp: 38:25

//timestamp: 41:43 

//timestamp: 44:29

//timestamp: 46:43

//timestamp: 48:53

//timestamp: 50:52

//timestamp: 55:17

//timestamp: 56:50

//timestamp: 59:27

//timestamp: 1:00:53